#-------------------------------------------------------------------------------
# @author: Kun Gao
# @created: 2021/03/08
# @updated: 2021/03/08
#
#
# @desc: chenck accuracy of rules generated by the interpretor
#-------------------------------------------------------------------------------
import sys
from source.examples.example_lf1t import cal_acc_fol
from source.examples.example_lf1t import rule_classification_accuracy
from source.examples.example_lf1t import next_state_file
import pickle

def check_accuracy(dataset, tem_flag = 1, index=1, target_feature_name='krk', num_class = 1, current_index_in_list=0, repeated_time= 0, incomplete_flag= 0, fuzzy_flag = 0):
    '''
    Check classification accuracccy of FOL rules
    '''
    #test_state = [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    print("index is", index)
    n = index
    states = []
    if incomplete_flag == 1 and fuzzy_flag == 0:
        rp = open("../data/"+dataset+"/in_format/incomplete/"+str(current_index_in_list)+"/"+str(repeated_time)+'/'+target_feature_name+str(n)+"Testing.data","rb")
    elif incomplete_flag == 0 and fuzzy_flag == 1:
        rp = open("../data/"+dataset+"/in_format/fuzzy/"+str(current_index_in_list)+"/"+str(repeated_time)+'/'+target_feature_name+str(n)+"Testing.data","rb")
    else:
        rp = open("../data/"+dataset+"/in_format/"+target_feature_name+str(n)+"Testing.data","rb")
    test_data = pickle.load(rp)
    rp.close()

    test_state = test_data
    
    if incomplete_flag == 1 and fuzzy_flag == 0:
        if tem_flag == 1:
            check_logic_program_path = "../data/" + dataset + '/incomplete/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_tem/test_lfit'+str(n)+'temporary.txt'            
        else:
            check_logic_program_path = "../data/" + dataset + '/incomplete/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_tem/test_lfit'+str(n)+'final.txt'        
    elif incomplete_flag == 0 and fuzzy_flag == 1:
        if tem_flag == 1:
            check_logic_program_path = "../data/" + dataset + '/fuzzy/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_tem/test_lfit'+str(n)+'temporary.txt'            
        else:
            check_logic_program_path = "../data/" + dataset + '/fuzzy/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_tem/test_lfit'+str(n)+'final.txt' 
    else:
        if tem_flag == 1:
            check_logic_program_path = '../data/'+dataset+"/logic_program_tem/test_lfit"+str(n)+"temporary.txt" # always check temporary logic program generated when the end of epoch
        else:
            check_logic_program_path = '../data/'+dataset+"/logic_program_final/test_lfit"+str(n)+"final.txt" #  check final logic program generated when the end of epoch
    standard_logic_program = "../data/benchmarks/logic_programs/"+dataset+".lp"
    accuracy, saved_weight_flag = rule_classification_accuracy(check_logic_program_path, standard_logic_program , test_state, num_class )
    return accuracy, saved_weight_flag
# check_accuracy('krk',tem_flag = 0)

def check_accuracy_given_logic_rule():
    n = 1 #set a index of data to check accuray
    dataset = 'fission' # give a name of datasets
    num_class = 10 # number of different head variables 
    rp = open("../data/"+dataset+"/in_format/"+target_feature_name+str(n)+"Testing.data","rb")
    test_data = pickle.load(rp)
    rp.close()
    test_state = test_data
    check_logic_program_path = '../data/'+dataset+"/logic_program_final/test_lfit"+str(n)+"final_comb.txt"
    accuracy, saved_weight_flag = rule_classification_accuracy(check_logic_program_path, '' , test_state, num_class )
    print(accuracy, saved_weight_flag)
    

def get_next_state(dataset, current_state = [1,2,3], tem_flag = 1, index = 1 , num_class = 1,  current_index_in_list=0, repeated_time= 0, incomplete_flag= 0, fuzzy_flag = 0):
    '''
    Got next state of rules
    Dataset: name of current dataset
    current_state: [1,1,0] in list format
    return next_state in numpy array format
    '''
    #test_state = [[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],[1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]
    # print("index is", index)
    n = index
    
    if incomplete_flag == 1 and fuzzy_flag == 0:
        if tem_flag == 1:
            check_logic_program_path = "../data/" + dataset + '/incomplete/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_tem/test_lfit'+str(n)+'temporary.txt'            
        else:
            check_logic_program_path = "../data/" + dataset + '/incomplete/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_final/test_lfit'+str(n)+'final.txt'        
    elif incomplete_flag == 0 and fuzzy_flag == 1:
        if tem_flag == 1:
            check_logic_program_path = "../data/" + dataset + '/fuzzy/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_tem/test_lfit'+str(n)+'temporary.txt'            
        else:
            check_logic_program_path = "../data/" + dataset + '/fuzzy/'+str(current_index_in_list)+"/"+str(repeated_time)+'/logic_program_final/test_lfit'+str(n)+'final.txt' 
    else:
        if tem_flag == 1:
            check_logic_program_path = '../data/'+dataset+"/logic_program_tem/test_lfit"+str(n)+"temporary.txt" # always check temporary logic program generated when the end of epoch
        else:
            check_logic_program_path = '../data/'+dataset+"/logic_program_final/test_lfit"+str(n)+"final.txt" #  check final logic program generated when the end of epoch
    
    next_state = next_state_file(check_logic_program_path , current_state, num_class)
    return next_state  

#check_accuracy_given_logic_rule()